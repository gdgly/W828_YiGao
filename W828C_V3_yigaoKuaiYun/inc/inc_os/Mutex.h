#ifndef MUTEX_H
#define MUTEX_H


/*************************************************************************
 * TYPEDEFS
 *************************************************************************/


/* 互斥量结构体。*/
typedef struct mutex_t
{
	int			locked;			// 是否已经被锁定
	int			cntList;		// 等待列表中的进程个数
    void *		owner;			// current locking thread
    void *		waitList;		// queue of waiting threads
    

} MUTEX;

#define OS_DEL_NO_PEND 1
#define OS_DEL_ALWAYS 2

/*----------------------------------------------------------------------
* 函数: mutex_init
* 说明: 创建互斥量
* 参数: void
* 返回: 如果创建成功，返回指向该互斥量的指针；否则返回空指针
*-----------------------------------------------------------------------*/
MUTEX *mutex_init( void );

/*----------------------------------------------------------------------
* 函数: mutex_destroy
* 说明: 删除互斥量
* 参数: pmutex	-- 指向互斥量的指针
*		opt: OS_DEL_NO_PEND -- 如果有进程等待，则该互斥量不删除
*			 OS_DEL_ALWAYS --- 如果有进程等待，则设置所有等待进程都进入就绪
*								状态，并且每个任务都得到互斥量。
* 返回: 0:SUCCESS or -1:FAIL
* 注意：如果判断到返回值为SUCCESS时，说明销毁成功，请置pmutex为NULL，
*		防止下次或其他进程的再引用。
*-----------------------------------------------------------------------*/
int mutex_destroy( MUTEX *pmutex, int opt );

/*----------------------------------------------------------------------
* 函数: mutex_lock
* 说明: 将互斥量加锁，或等待
* 参数: 互斥量对象指针
* 返回: 0:SUCCESS or -1:FAIL
*-----------------------------------------------------------------------*/
int mutex_lock( MUTEX *pmutex );

/*----------------------------------------------------------------------
* 函数: mutex_trylock
* 说明: 将互斥量加锁，如果当前不可用，则直接返回而不等待
* 参数: 互斥量对象指针
* 返回: bool类型变量，标志操作结果。该进程锁定了，返回1，否则返回0
*-----------------------------------------------------------------------*/
int mutex_trylock( MUTEX *pmutex );

/*----------------------------------------------------------------------
* 函数: mutex_unlock
* 说明: 将互斥量解锁，如果等待队列不为空，则唤醒全部等待进程
* 参数: 互斥量对象指针
* 返回: void
*-----------------------------------------------------------------------*/
void mutex_unlock( MUTEX *pmutex );




#endif /* MUTEX_H */


