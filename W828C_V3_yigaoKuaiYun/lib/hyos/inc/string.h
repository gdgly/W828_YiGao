#ifndef __STRING_H__
#define __STRING_H__

//#ifndef size_t 
//#define size_t unsigned int
//#endif 

#ifndef _SIZET
#define _SIZET
typedef unsigned int size_t;
#endif
 

#ifndef NULL
#define NULL (void *)0
#endif

#if 0
#define isspace(ch) ((unsigned int)((ch) - 9) < 5u || (ch) == ' ')
#define tolower(ch) (((unsigned int)((ch) - 'A') < 26u) ? ((ch) + 'a' - 'A') : (ch))
#define isdigit(ch) ((unsigned int)((ch) - '0') < 10u || (unsigned int)(((ch) | 0x20) - 'a') < 6u)
#endif

/*-------------------------------------------------------------------------------------------
* 函数:	strrchr				
* 功能:	扫描字符串，找到最后出现特定字符的位置
* 参数:	string	--	字符串，以NULL结束
*		c		--	需要查找的特定字符
* 返回:	指向最后出现特定字符的位置，如果没有找到该字符，返回NULL
*--------------------------------------------------------------------------------------------*/
char *strrchr(const char *string, int c);

/*-------------------------------------------------------------------------------------------
* 函数:	strchr				
* 功能:	扫描字符串，找到第一次出现特定字符的位置
* 参数:	string	--	字符串，以NULL结束
*		c		--	需要查找的特定字符
* 返回:	指向第一次出现特定字符的位置，如果没有找到该字符，返回NULL
*--------------------------------------------------------------------------------------------*/
char *strchr(const char *string, int c);

/*-------------------------------------------------------------------------------------------
* 函数:	strlen				
* 功能:	计算字符串的长度
* 参数:	string	--	字符串，以NULL结束
*		c		--	需要查找的特定字符
* 返回:	字符串的长度，不包括结尾的NULL字符
*--------------------------------------------------------------------------------------------*/
size_t strlen(const char *string);

/*-------------------------------------------------------------------------------------------
* 函数:	strcat				
* 功能:	将源字符串加到目标字符串的尾部
* 参数:	strDest		--	目标字符串，以NULL结束
*		strSource	--	源字符串，以NULL结束
* 返回:	返回指向目标字符串的指针
*--------------------------------------------------------------------------------------------*/
char *strcat(char *strDest, const char *strSource);

/*-------------------------------------------------------------------------------------------
* 函数:	strcmp				
* 功能:	比较字符串，
* 参数:	string1	--	字符串1，以NULL结束
*		string2	--	字符串2，以NULL结束
* 返回:	返回值为0，表示两个字符串一样
*		返回值小于0或大于0，表示首次出现不一样处，字符串1的字符减字符串2的字符的差值
*--------------------------------------------------------------------------------------------*/
int strcmp( const char *string1, const char *string2);

/*-------------------------------------------------------------------------------------------
* 函数:	strncmp				
* 功能:	比较字符串，比较有限个的字符个数
* 参数:	string1	--	字符串1，以NULL结束
*		string2	--	字符串2，以NULL结束
*		count	--  需要比较的字符个数
* 返回:	返回值为0，表示两个字符串一样
*		返回值小于0或大于0，表示首次出现不一样处，字符串1的字符减字符串2的字符的差值
*--------------------------------------------------------------------------------------------*/
int strncmp(const char *string1, const char *string2, size_t count);

/*-------------------------------------------------------------------------------------------
* 函数:	_stricmp				
* 功能:	不分大小写地比较字符串，复制有限个数的字符串
* 参数:	strDest		--	目标字符串，以NULL结束
*		strSource	--	源字符串，以NULL结束
* 返回:	返回值为0，表示两个字符串一样
*		返回值小于0或大于0，表示首次出现不一样处，字符串1的字符减字符串2的字符的差值
*--------------------------------------------------------------------------------------------*/
int _stricmp(const char *string1, const char *string2);

/*-------------------------------------------------------------------------------------------
* 函数:	_strnicmp				
* 功能:	不分大小写地比较字符串，比较有限个数的字符串
* 参数:	strDest		--	目标字符串，以NULL结束
*		strSource	--	源字符串，以NULL结束
*		count		--  需要比较的字符个数
* 返回:	返回指向目标字符串的指针
*--------------------------------------------------------------------------------------------*/
int _strnicmp(const char *string1, const char *string2, size_t count);

/*-------------------------------------------------------------------------------------------
* 函数:	strcpy				
* 功能:	复制字符串
* 参数:	strDestination	--	目标字符串，以NULL结束
*		strSource		--	源字符串，以NULL结束
* 返回:	返回指向目标字符串的指针
*--------------------------------------------------------------------------------------------*/
char *strcpy(char *strDestination, const char *strSource);

/*-------------------------------------------------------------------------------------------
* 函数:	strncpy				
* 功能:	复制字符串strSource开始的count个字符到strDest
* 参数:	strDest		--	目标字符串，以NULL结束
*		strSource	--	源字符串，以NULL结束
*		count		--  需要复制的字符个数
* 返回:	返回指向目标字符串的指针
* 注意: 该函数只是将strSource的count个字符(如果strSource长度小于count，则搬该长度+1个<以0结尾>)
*		照搬到strDest开始处并覆盖strDest的count个字符。
*--------------------------------------------------------------------------------------------*/
char *strncpy(char *strDest, const char *strSource, size_t count);

/*-------------------------------------------------------------------------------------------
* 函数:	_strrev				
* 功能:	将字符串反转 (for example: "abc" => "cba")
* 参数:	
*		str			--	要反转的字符串
* 返回:	返回转换后的存放buffer
*--------------------------------------------------------------------------------------------*/
char *_strrev(char *str);

/*-------------------------------------------------------------------------------------------
* 函数:	atol				
* 功能:	把字符串转换为long int型数字 (for example: "132" => 132)
* 参数:	str		--	要转换的字符串，以NULL结束
* 返回:	返回转换后的数字。该函数不对字符的合法性做判断，不对长短越界做判断
*--------------------------------------------------------------------------------------------*/
long atol(const char *str);

/*-------------------------------------------------------------------------------------------
* 函数:	atoi				
* 功能:	把字符串转换为int型数字 (for example: "132" => 132)
* 参数:	str		--	要转换的字符串，以NULL结束
* 返回:	返回转换后的数字。该函数不对字符的合法性做判断，不对长短越界做判断
*--------------------------------------------------------------------------------------------*/
int atoi(const char *str);

/*-------------------------------------------------------------------------------------------
* 函数:	_ltoa				
* 功能:	把long int型数字转换为字符串 (for example: 132 => "132\0") [\0为结束符0]
* 参数:	value		--	要转换的数字 (long int型)
*		str			--  长度必须为足够长的buffer（length＋1）
*		radix		--	转换为几进制的数的字串 (该值范围为>=2, <= 16)
* 返回:	返回转换后的存放buffer。不会返回错误。
* 注意: 如果计算结果超过36位，将只保留后36位。
*		如果是负数，暂时只支持2/8/10/16进制的转换；正数则支持2-16所有进制的转换
*		负数并且不是2/8/10/16进制，结果未知
* 注意: 例：132－>“132”，但buffer length必须要 >= 4，因为string最后以0结尾。
*--------------------------------------------------------------------------------------------*/
char *_ltoa(long int value, char *str, int radix);

/*-------------------------------------------------------------------------------------------
* 函数:	_itoa				
* 功能:	把int型数字转换为字符串 (for example: 132 => "132\0") [\0为结束符0]
* 参数:	value		--	要转换的数字 (int型)
*		string		--  长度必须为足够长的buffer（length＋1）
*		radix		--	转换为几进制的数的字串 (该值范围为>=2, <= 16)
* 返回:	返回转换后的存放buffer。不会返回错误。
* 注意: 如果计算结果超过36位，将只保留后36位。
*		如果是负数，暂时只支持2/8/10/16进制的转换；正数则支持2-16所有进制的转换
*		如果是负数并且不是2/8/10/16进制，结果未知
* 注意: 例：132－>“132”，但buffer length必须要 >= 4，因为string最后以0结尾。
*--------------------------------------------------------------------------------------------*/
char *_itoa(int value, char *string, int radix);




#endif //__STRING_H__

