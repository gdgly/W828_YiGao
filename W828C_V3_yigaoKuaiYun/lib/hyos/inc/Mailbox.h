#ifndef MAILBOX_H
#define MAILBOX_H



/*************************************************************************
 * TYPEDEFS
 *************************************************************************/

/* 这里定义邮箱的长度为MAILBOX_QUEUE_SIZE (eCOS中默认为10,uC/OS中默认为16) */
/* 这里我们采取大一点，最多浪费几个字节，而不会使从uC/OS移植时影响到效率 */
#define MAILBOX_QUEUE_SIZE 16

/* 邮箱控制结构体。用于控制邮箱的使用。*/
typedef struct mailbox_t
{
	int		   base;			/* index of first used slot */
    int        count; 			/* count of used slot */
    
    int		   cnt_getlist;		/* the threads count in get waiting list */
    int		   cnt_putlist;		/* the threads count in put waiting list */
    void *     get_waitList;	/* queue of waiting threads (get-list) */
    void *     put_waitList;	/* queue of waiting threads (put-list) */
    
    void *	   itemqueue[MAILBOX_QUEUE_SIZE];	//MailBox的条目数组。
    
    void *	   owner;			/* 参考SEMAPHORE结构体内该项的说明 */
    							/* 只有在销毁时该项才有用，也才有值 */
    
} MAILBOX;

#define OS_DEL_NO_PEND 1
#define OS_DEL_ALWAYS 2

/*----------------------------------------------------------------------
* 函数: mailbox_init
* 说明: 创建邮箱对象
* 参数: void
* 返回: 如果创建成功，返回指向该邮箱的指针；否则返回空指针
*-----------------------------------------------------------------------*/
MAILBOX *mailbox_init( void );


/*----------------------------------------------------------------------
* 函数: mailbox_destroy
* 说明: 删除邮箱对象
* 参数: pmailbox -- 邮箱对象指针
*		opt: OS_DEL_NO_PEND -- 如果有进程等待，则该邮箱不删除
*			 OS_DEL_ALWAYS --- 如果有进程等待，则设置所有等待进程都进入就绪
*								状态，并且每个任务都得到邮件。
* 返回: 0:SUCCESS or -1:FAIL
* 注意：如果判断到返回值为SUCCESS时，说明销毁成功，请置pmailbox为NULL，
*		防止下次或其他进程的再引用。
*-----------------------------------------------------------------------*/
int mailbox_destroy( MAILBOX *pmailbox, int opt );


/*----------------------------------------------------------------------
* 函数: mailbox_get
* 说明: 从邮箱中获取一个项目，如果邮箱为空，则等待; 如果邮箱已经满并且有
*		等待放入邮件的进程存在，则全部唤醒
* 参数: 邮箱对象指针
* 返回: 指向该获取项目的指针或NULL(此时wait出错)
*-----------------------------------------------------------------------*/
void *mailbox_get( MAILBOX *pmailbox );


/*----------------------------------------------------------------------
* 函数: mailbox_timed_get
* 说明: 从邮箱中获取一个项目，如果邮箱为空，则等待到非空或超时
* 参数: pmailbox: 邮箱对象指针
*		ticks: time out 等待的最长时间
*		realtime: 在有效时间内正常获取到邮件时，所等待的时间
* 返回: 指向该获取项目的指针
*-----------------------------------------------------------------------*/
void *mailbox_timed_get( MAILBOX *pmailbox, int ticks, int *realtime );


/*----------------------------------------------------------------------
* 函数: mailbox_tryget
* 说明: 从邮箱中获取一个项目，不管邮箱是否为空，都不等待
* 参数: 邮箱对象指针
* 返回: 指向该获取项目的指针或NULL
*-----------------------------------------------------------------------*/
void *mailbox_tryget( MAILBOX *pmailbox );


/*----------------------------------------------------------------------
* 函数: mailbox_peek
* 说明: 获取当前邮箱中的项目个数
* 参数: 邮箱对象指针
* 返回: 当前邮箱中的项目个数
*-----------------------------------------------------------------------*/
int mailbox_peek( MAILBOX *pmailbox );


/*----------------------------------------------------------------------
* 函数: mailbox_peek_item
* 说明: 从邮箱中获取下一个项目，而并不将该项目从邮箱中删除，同时也不影响
*       邮箱中的指针和记数值。如果为空，则等待
* 参数: 邮箱对象指针
* 返回: 从邮箱中获取的下一个项目的指针或NULL
*-----------------------------------------------------------------------*/
void *mailbox_peek_item( MAILBOX *pmailbox );


/*----------------------------------------------------------------------
* 函数: mailbox_put
* 说明: 往邮箱中放入一个项目；如果邮箱满，则等待；如果邮箱空并且有进程
*		等待，则唤醒全部等待进程。
* 参数: pmailbox: 邮箱对象指针
*		item: 需要放置的项目的指针
* 返回: 0:SUCCESS or <0:FAIL
*-----------------------------------------------------------------------*/
int mailbox_put( MAILBOX *pmailbox, void *item );


/*----------------------------------------------------------------------
* 函数: mailbox_timed_put
* 说明: 往邮箱中放入一个项目；如果邮箱满，则等待到出现空间或超时; 如果
*		邮箱空并且有进程等待，则唤醒全部等待进程。
* 参数: pmailbox: 邮箱对象指针
*		item: 需要放置的项目的指针
*		ticks: 等待时间
*		realtime: 在有效时间内正常发送出信号时，所等待的时间
* 返回: 0:SUCCESS or <0:FAIL
*-----------------------------------------------------------------------*/
int mailbox_timed_put( MAILBOX *pmailbox, void *item, int ticks, int *realtime );


/*----------------------------------------------------------------------
* 函数: mailbox_tryput
* 说明: 往邮箱中放入一个项目；如果邮箱满，则返回; 如果邮箱空并且有进程等待，
*		则唤醒全部等待进程。
* 参数: pmailbox: 邮箱对象指针
*		item: 需要放置的项目的指针
* 返回: 0: SUCCESS  or  -1: FAIL
*-----------------------------------------------------------------------*/
int mailbox_tryput( MAILBOX *pmailbox, void *item );


/*----------------------------------------------------------------------
* 函数: mailbox_waiting_to_get
* 说明: 检查当前获取项目列表是否有进程等待
* 参数: pmailbox: 邮箱对象指针
* 返回: 0 or 1
*-----------------------------------------------------------------------*/
int mailbox_waiting_to_get( MAILBOX *pmailbox );

/*----------------------------------------------------------------------
* 函数: mailbox_waiting_to_put
* 说明: 检查当前放置项目列表是否有进程等待
* 参数: pmailbox: 邮箱对象指针
* 返回: 0 or 1
*-----------------------------------------------------------------------*/
int mailbox_waiting_to_put( MAILBOX *pmailbox );


#endif /* MAILBOX_H */

