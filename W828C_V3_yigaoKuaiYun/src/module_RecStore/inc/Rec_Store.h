/******************************************************************************
*  文件:		nandSeqStore.c (Hyctron Nandflash Abstract Layer 's fbd driver)
*  创建：		ZhouJie 
*  创建日期 :	2010 12 17 15:52
*  说明     :	针对物流应用，直接使用nand进行存储的方案

*   需求
*    1：获取磁盘上所有未上传数据。
*    2：生成记录。
*    3：上传成功后对该记录做标记，标识该记录已上传。
*    4：删除记录。(已上传和正在上传的记录不能删除)，删除后标记该记录；
*    5：业绩统计: 根据日期、扫描类型 获取指定日期的所有该扫描类型 的总数 和 已上传数  
*       (注：日期可以为指定天,指定月； 同一个文件包括多种扫描类型)
*    6：查看记录: 查看某一种扫描类型 在指定某一天的所有扫描的状态 (注: 状态 为 已上传、未上传) ，
*		还支持更改状态，即删除未上传的状态记录 ,以便后台不予上传
*    7：删除指定扫描类型的当天记录 及 删除 除最近三天的历史记录

*	设计

*	1。 bitmap 占一个page 循环写入，最后的字节标示有效与否与序号
*   2。 file entry 占一个page 循环写入, 最后的字节标示有效与否与序号
*   3。 每个file 的第一个block 记录文件中的记录的状态等信息，page循环写入
*        一个文件24 block  一个block 128 page，则记录最多 24*128 = 3076， 一个记录占2bit
*		如果这些记录都放在一个page中，则每个记录可以分10个字节

*	限制
*	所有设计，为了简单起见，nand 的page 设为4096 字节的大小

*  变量名字约定:	page 指 物理的page，现在有两种，512 或2048
*					sector， 指 logic sector，仅有512的size
*  预定义说明：	NAND_SUPPORT_HW_MLC			是否支持MLC的flash，如果支持，则目前仅支持1G的flash

*  修改(孔祥文 2011-06-15)
*  支持slc (512M   page size 2048  一个block 64个page)
 *****************************************************************************/
#ifndef _REC_STORE_H
#define _REC_STORE_H


#include "hyswNandFile.h"
#include "Rec_Info.h"

/*------------------------------------------------------------------*/


typedef int (*TYPE_CMP)(void *par, void *param);
typedef int (*DATA_CMP)(void *par, void *param);


//api function...
/*-----------------------------------------------------------
*函数:	RecStore_Init
*功能:	模块初始化.
*参数：.
*返回:	成功：HY_OK   失败：HY_ERROR
*------------------------------------------------------------*/
int RecStore_Init();


/*-----------------------------------------------------------
*函数：RecStore_getFileHandle
*功能：通过文件名找到文件，返回file idx   
       注意:可能存在同名文件, 如果一天的记录太多,一个文件存放不完,就要使用2个文件,这2个文件名相同.
*参数：	name -- 文件名
*		pagebuf	-- 临时buf,一个page 大小
*返回：成功：返回找到的文件个数   失败：<=0
*------------------------------------------------------------*/
int RecStore_getFileHandle(U8 *name, int *pFileIdx);


/*-----------------------------------------------------------
*函数:	RecStore_WriteRecord
*功能:	在指定文件中写入一条记录.
*	  	如果该文件不存在,会自动创建文件.如果存在,直接写入.
*参数：
*	    pDate_name:文件名. 6字字符
*		pNode:要写的数据
*		recId:返回的ID.记录写入的位置.
*返回:	成功：HY_OK   失败：HY_ERROR
*------------------------------------------------------------*/
int RecStore_WriteRecord(U8 *pDate_name, tDATA_INFO *pNode, U32 *recId);

/*-----------------------------------------------------------
*函数:	RecStore_GetExistFileList
*功能:	得到目前已有的文件个数和名字列表.
*参数： 
*		ppArr: 存储名字列表的二维数组
*返回:	文件个数.
*------------------------------------------------------------*/
int RecStore_GetFileNameList(int *pNodeArr);


/*-----------------------------------------------------------
*函数:	RecStore_deleteFile
*功能:	删除指定的文件
*参数： 
*返回:	文件个数.
*------------------------------------------------------------*/
int RecStore_deleteFile(U8 *name);


/*-----------------------------------------------------------
*函数：RecStore_GetAllUnreported
*功能：得到指定用户类型的所有未上传数据的数据并加入上传队列中去
*参数:  usertype : 权限
*返回：失败：-1    成功：0
*------------------------------------------------------------*/
int RecStore_GetAllUnreported(U8 usertype);


/*-----------------------------------------------------------
*函数：RecStore_GetRecordStateNum
*功能：得到指定用户类型 日期 类型的记录数据的条数  (总数  已上传  已删除)
*参数：
	   usertype:用户类型
	   pDate_name:指定的日期   如果pEntry不为NULL 
	   type:指定类型
	   total: 总数
	   rep ：已上传
	   unrep：未上传
*返回：失败：-1    成功：0
*------------------------------------------------------------*/
//int RecStore_GetRecordStateNum(U8 *pDate_name, U8 usertype, U8 type, U32 *total, U32 *rep, U32 *unrep);
int RecStore_GetRecordStateNum(U8 *pDate_name, U8 usertype, U8 type, tREC_INFO *pRecInfo);

/*-----------------------------------------------------------
*函数：RecStore_GetRecordInfo
*功能：得到指定用户类型 日期 类型的记录数据的详细信息   不包括已删除的记录
*参数：pEntry:如果知道文件的entry则传进来  不知道可以传NULL
	   usertype:用户类型
	   date:指定的日期   如果pEntry不为NULL  date可以传NULL
	   type:指定类型
	   pBuf：返回的buf  tQUEnode结构的
	   buflen：buf长度
*返回：失败：-1    成功：返回记录个数
*------------------------------------------------------------*/
int RecStore_GetRecordInfo(U8 *pDateName, U16 usertype, U8 type, U8 *pBuf, int buflen);



/*-----------------------------------------------------------
*函数：RecStore_delLog
*功能：删除指定日期以外的文件
*参数: dates ---- 指定的日期
*返回：失败：-1    成功：0
*------------------------------------------------------------*/
int RecStore_delLog(void *names);


/*-----------------------------------------------------------
*函数：RecStore_Clear
*功能：清除所有记录信息
*参数: none
*返回：NULL
*------------------------------------------------------------*/
void RecStore_Clear();


/*-----------------------------------------------------------
*函数：RecStore_DelErrorScan
*功能：删除 某一记录 (根据权限,扫描类型,扫描码)
*参数：usertype:用户类型	   
	   type:指定类型
	   code:扫描码
*返回：失败：-1    成功：0
*------------------------------------------------------------*/
int RecStore_DelErrorScan(U16 usertype, U8 type, U8 *pcode);


/*-----------------------------------------------------------
*函数：RecStore_DelErrorScan
*功能：删除 某一指定条.(指定文件和文件内索引)
*参数：fileIdx:文件索引   
	   recordIdx:文件内记录索引
*返回：失败：-1    成功：0
*------------------------------------------------------------*/
int RecStore_DeleteRecord(int fileIdx, int recordIdx);



/*-----------------------------------------------------------
*函数：RecStore_repedRecord
*功能：修改某一指定条为上传状态.(指定文件和文件内索引)
*参数：fileIdx:文件索引   
	   recordIdx:文件内记录索引
*返回：失败：-1    成功：0
*------------------------------------------------------------*/
int RecStore_repedRecord(int fileIdx, int recordIdx);

/*====================================================================*/
/*-----------------------------------------------------------
*函数:	PicStore_Format
*功能:	格式化
*参数：	pBuf:调用者提供内存
*返回:	成功：0   失败：-1
*------------------------------------------------------------*/
int PicStore_Format();

/*-----------------------------------------------------------
*函数:	PicStore_Init
*功能:	模块初始化.
*参数：	pBuf:调用者提供内存
*返回:	成功：0   失败：-1
*------------------------------------------------------------*/
int PicStore_Init(U8 *pBuf);

/*-----------------------------------------------------------
*函数:	PicStore_DelFile
*功能:	删除指定文件
*参数：	idx:文件索引  0--1
*返回:	成功：0   失败：-1
*------------------------------------------------------------*/
int PicStore_DelFile(int idx);

/*-----------------------------------------------------------
*函数:	PicStore_Write
*功能:	写入图片信息
*参数：.
*返回:	成功：0   失败：-1
*------------------------------------------------------------*/
int PicStore_Write(U8 *pCode, U8 *pData, U16 size);

/*-----------------------------------------------------------
*函数:	PicStore_Read
*功能:	读出图片数据
*参数：.
*返回:	成功：0   失败：-1     调用者提供buf长度不够: -2
*------------------------------------------------------------*/
int PicStore_Read(U8 *pCode, U8 *pData, U16 bufsize);

/*-----------------------------------------------------------
*函数:	PicStore_IfExist
*功能:	检查图片是否存在
*参数：.
*返回:	存在：0   不存在：-1
*------------------------------------------------------------*/
int PicStore_IfExist(U8 *pCode);

/*-----------------------------------------------------------
*函数:	PicStore_Delete
*功能:	删除图片数据
*参数：.
*返回:	成功：0   失败：-1
*------------------------------------------------------------*/
int PicStore_Delete(U8 *pCode);


#endif //_REC_STORE_H